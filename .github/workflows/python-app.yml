name: Build and Release Python Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.12.6]
    runs-on: ${{ matrix.os }}

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set name
        id: get_filename
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "ASSET_NAME=linux_amd64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "ASSET_NAME=windows_x86-64" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Build executable with PyInstaller
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            pyinstaller --onefile --distpath ./dist/linux --workpath ./build/linux main.py
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pyinstaller --onefile --distpath ./dist/windows --workpath ./build/windows main.py
          fi
        shell: bash

      - name: Create ZIP archive of the executables
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mkdir ./dist/linux/conf
            cp ./conf/.env.example ./dist/linux/conf/.env.example 
            zip -r ./dist/lsky-bot-linux_amd64.zip ./dist/linux/*  
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install zip -y
            mkdir ./dist/windows/conf
            cp ./conf/.env.example ./dist/windows/conf/.env.example 
            zip -r ./dist/lsky-bot-windows_x86-64.zip ./dist/windows/* 
          fi
        shell: bash

      - name: List dist directory contents
        run: ls -l ./dist
        shell: bash

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get_filename.outputs.ASSET_NAME }}
          path: |
            ./dist/lsky-bot-${{ steps.get_filename.outputs.ASSET_NAME }}.zip

      - name: Upload files to GitHub Releases
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/lsky-bot-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
          tag: ${{ github.ref }}
